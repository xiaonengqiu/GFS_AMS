/*! AdminLTE app.js
 * ================
 * Main JS application file for AdminLTE v2. This file
 * should be included in all pages. It controls some layout
 * options and implements exclusive AdminLTE plugins.
 *
 * @Author  Almsaeed Studio
 * @Support <http://www.almsaeedstudio.com>
 * @Email   <abdullah@almsaeedstudio.com>
 * @version 2.3.7
 * @license MIT <http://opensource.org/licenses/MIT>
 */
function _init() {
    "use strict";
    $.AdminLTE.layout = {
        activate: function () {
            var a = this;
            a.fix(), a.fixSidebar(), $(window, ".wrapper").resize(function () {
                a.fix(), a.fixSidebar()
            })
        }, fix: function () {
            var a = $(".main-header").outerHeight() + $(".main-footer").outerHeight(), b = $(window).height(), c = $(".sidebar").height();
            if ($("body").hasClass("fixed"))$(".content-wrapper, .right-side").css("min-height", b - $(".main-footer").outerHeight()); else {
                var d;
                b >= c ? ($(".content-wrapper, .right-side").css("min-height", b - a), d = b - a) : ($(".content-wrapper, .right-side").css("min-height", c), d = c);
                var e = $($.AdminLTE.options.controlSidebarOptions.selector);
                "undefined" != typeof e && e.height() > d && $(".content-wrapper, .right-side").css("min-height", e.height())
            }
        }, fixSidebar: function () {
            return $("body").hasClass("fixed") ? ("undefined" == typeof $.fn.slimScroll && window.console && window.console.error("Error: the fixed layout requires the slimscroll plugin!"), void($.AdminLTE.options.sidebarSlimScroll && "undefined" != typeof $.fn.slimScroll && ($(".sidebar").slimScroll({destroy: !0}).height("auto"), $(".sidebar").slimscroll({
                height: $(window).height() - $(".main-header").height() + "px",
                color: "rgba(0,0,0,0.2)",
                size: "3px"
            })))) : void("undefined" != typeof $.fn.slimScroll && $(".sidebar").slimScroll({destroy: !0}).height("auto"))
        }
    }, $.AdminLTE.pushMenu = {
        activate: function (a) {
            var b = $.AdminLTE.options.screenSizes;
            $(document).on("click", a, function (a) {
                a.preventDefault(), $(window).width() > b.sm - 1 ? $("body").hasClass("sidebar-collapse") ? $("body").removeClass("sidebar-collapse").trigger("expanded.pushMenu") : $("body").addClass("sidebar-collapse").trigger("collapsed.pushMenu") : $("body").hasClass("sidebar-open") ? $("body").removeClass("sidebar-open").removeClass("sidebar-collapse").trigger("collapsed.pushMenu") : $("body").addClass("sidebar-open").trigger("expanded.pushMenu")
            }), $(".content-wrapper").click(function () {
                $(window).width() <= b.sm - 1 && $("body").hasClass("sidebar-open") && $("body").removeClass("sidebar-open")
            }), ($.AdminLTE.options.sidebarExpandOnHover || $("body").hasClass("fixed") && $("body").hasClass("sidebar-mini")) && this.expandOnHover()
        }, expandOnHover: function () {
            var a = this, b = $.AdminLTE.options.screenSizes.sm - 1;
            $(".main-sidebar").hover(function () {
                $("body").hasClass("sidebar-mini") && $("body").hasClass("sidebar-collapse") && $(window).width() > b && a.expand()
            }, function () {
                $("body").hasClass("sidebar-mini") && $("body").hasClass("sidebar-expanded-on-hover") && $(window).width() > b && a.collapse()
            })
        }, expand: function () {
            $("body").removeClass("sidebar-collapse").addClass("sidebar-expanded-on-hover")
        }, collapse: function () {
            $("body").hasClass("sidebar-expanded-on-hover") && $("body").removeClass("sidebar-expanded-on-hover").addClass("sidebar-collapse")
        }
    }, $.AdminLTE.tree = function (a) {
        var b = this, c = $.AdminLTE.options.animationSpeed;
        $(document).off("click", a + " li a").on("click", a + " li a", function (a) {
            var d = $(this), e = d.next();
            if (e.is(".treeview-menu") && e.is(":visible") && !$("body").hasClass("sidebar-collapse"))e.slideUp(c, function () {
                e.removeClass("menu-open")
            }), e.parent("li").removeClass("active"); else if (e.is(".treeview-menu") && !e.is(":visible")) {
                var f = d.parents("ul").first(), g = f.find("ul:visible").slideUp(c);
                g.removeClass("menu-open");
                var h = d.parent("li");
                e.slideDown(c, function () {
                    e.addClass("menu-open"), f.find("li.active").removeClass("active"), h.addClass("active"), b.layout.fix()
                })
            }
            e.is(".treeview-menu") && a.preventDefault()
        })
    }, $.AdminLTE.controlSidebar = {
        activate: function () {
            var a = this, b = $.AdminLTE.options.controlSidebarOptions, c = $(b.selector), d = $(b.toggleBtnSelector);
            d.on("click", function (d) {
                d.preventDefault(), c.hasClass("control-sidebar-open") || $("body").hasClass("control-sidebar-open") ? a.close(c, b.slide) : a.open(c, b.slide)
            });
            var e = $(".control-sidebar-bg");
            a._fix(e), $("body").hasClass("fixed") ? a._fixForFixed(c) : $(".content-wrapper, .right-side").height() < c.height() && a._fixForContent(c)
        }, open: function (a, b) {
            b ? a.addClass("control-sidebar-open") : $("body").addClass("control-sidebar-open")
        }, close: function (a, b) {
            b ? a.removeClass("control-sidebar-open") : $("body").removeClass("control-sidebar-open")
        }, _fix: function (a) {
            var b = this;
            if ($("body").hasClass("layout-boxed")) {
                if (a.css("position", "absolute"), a.height($(".wrapper").height()), b.hasBindedResize)return;
                $(window).resize(function () {
                    b._fix(a)
                }), b.hasBindedResize = !0
            } else a.css({position: "fixed", height: "auto"})
        }, _fixForFixed: function (a) {
            a.css({position: "fixed", "max-height": "100%", overflow: "auto", "padding-bottom": "50px"})
        }, _fixForContent: function (a) {
            $(".content-wrapper, .right-side").css("min-height", a.height())
        }
    }, $.AdminLTE.boxWidget = {
        selectors: $.AdminLTE.options.boxWidgetOptions.boxWidgetSelectors,
        icons: $.AdminLTE.options.boxWidgetOptions.boxWidgetIcons,
        animationSpeed: $.AdminLTE.options.animationSpeed,
        activate: function (a) {
            var b = this;
            a || (a = document), $(a).on("click", b.selectors.collapse, function (a) {
                a.preventDefault(), b.collapse($(this))
            }), $(a).on("click", b.selectors.remove, function (a) {
                a.preventDefault(), b.remove($(this))
            })
        },
        collapse: function (a) {
            var b = this, c = a.parents(".box").first(), d = c.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");
            c.hasClass("collapsed-box") ? (a.children(":first").removeClass(b.icons.open).addClass(b.icons.collapse), d.slideDown(b.animationSpeed, function () {
                c.removeClass("collapsed-box")
            })) : (a.children(":first").removeClass(b.icons.collapse).addClass(b.icons.open), d.slideUp(b.animationSpeed, function () {
                c.addClass("collapsed-box")
            }))
        },
        remove: function (a) {
            var b = a.parents(".box").first();
            b.slideUp(this.animationSpeed)
        }
    }
}
if ("undefined" == typeof jQuery)throw new Error("AdminLTE requires jQuery");
$.AdminLTE = {}, $.AdminLTE.options = {
    navbarMenuSlimscroll: !0,
    navbarMenuSlimscrollWidth: "3px",
    navbarMenuHeight: "200px",
    animationSpeed: 500,
    sidebarToggleSelector: "[data-toggle='offcanvas']",
    sidebarPushMenu: !0,
    sidebarSlimScroll: !0,
    sidebarExpandOnHover: !1,
    enableBoxRefresh: !0,
    enableBSToppltip: !0,
    BSTooltipSelector: "[data-toggle='tooltip']",
    enableFastclick: !1,
    enableControlSidebar: !0,
    controlSidebarOptions: {
        toggleBtnSelector: "[data-toggle='control-sidebar']",
        selector: ".control-sidebar",
        slide: !0
    },
    enableBoxWidget: !0,
    boxWidgetOptions: {
        boxWidgetIcons: {collapse: "fa-minus", open: "fa-plus", remove: "fa-times"},
        boxWidgetSelectors: {remove: '[data-widget="remove"]', collapse: '[data-widget="collapse"]'}
    },
    directChat: {enable: !0, contactToggleSelector: '[data-widget="chat-pane-toggle"]'},
    colors: {
        lightBlue: "#3c8dbc",
        red: "#f56954",
        green: "#00a65a",
        aqua: "#00c0ef",
        yellow: "#f39c12",
        blue: "#0073b7",
        navy: "#001F3F",
        teal: "#39CCCC",
        olive: "#3D9970",
        lime: "#01FF70",
        orange: "#FF851B",
        fuchsia: "#F012BE",
        purple: "#8E24AA",
        maroon: "#D81B60",
        black: "#222222",
        gray: "#d2d6de"
    },
    screenSizes: {xs: 480, sm: 768, md: 992, lg: 1200}
}, $(function () {
    "use strict";
    $("body").removeClass("hold-transition"), "undefined" != typeof AdminLTEOptions && $.extend(!0, $.AdminLTE.options, AdminLTEOptions);
    var a = $.AdminLTE.options;
    _init(), $.AdminLTE.layout.activate(), $.AdminLTE.tree(".sidebar"), a.enableControlSidebar && $.AdminLTE.controlSidebar.activate(), a.navbarMenuSlimscroll && "undefined" != typeof $.fn.slimscroll && $(".navbar .menu").slimscroll({
        height: a.navbarMenuHeight,
        alwaysVisible: !1,
        size: a.navbarMenuSlimscrollWidth
    }).css("width", "100%"), a.sidebarPushMenu && $.AdminLTE.pushMenu.activate(a.sidebarToggleSelector), a.enableBSToppltip && $("body").tooltip({selector: a.BSTooltipSelector}), a.enableBoxWidget && $.AdminLTE.boxWidget.activate(), a.enableFastclick && "undefined" != typeof FastClick && FastClick.attach(document.body), a.directChat.enable && $(document).on("click", a.directChat.contactToggleSelector, function () {
        var a = $(this).parents(".direct-chat").first();
        a.toggleClass("direct-chat-contacts-open")
    }), $('.btn-group[data-toggle="btn-toggle"]').each(function () {
        var a = $(this);
        $(this).find(".btn").on("click", function (b) {
            a.find(".btn.active").removeClass("active"), $(this).addClass("active"), b.preventDefault()
        })
    })
}), function (a) {
    "use strict";
    a.fn.boxRefresh = function (b) {
        function c(a) {
            a.append(f), e.onLoadStart.call(a)
        }

        function d(a) {
            a.find(f).remove(), e.onLoadDone.call(a)
        }

        var e = a.extend({
            trigger: ".refresh-btn", source: "", onLoadStart: function (a) {
                return a
            }, onLoadDone: function (a) {
                return a
            }
        }, b), f = a('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');
        return this.each(function () {
            if ("" === e.source)return void(window.console && window.console.log("Please specify a source first - boxRefresh()"));
            var b = a(this), f = b.find(e.trigger).first();
            f.on("click", function (a) {
                a.preventDefault(), c(b), b.find(".box-body").load(e.source, function () {
                    d(b)
                })
            })
        })
    }
}(jQuery), function (a) {
    "use strict";
    a.fn.activateBox = function () {
        a.AdminLTE.boxWidget.activate(this)
    }, a.fn.toggleBox = function () {
        var b = a(a.AdminLTE.boxWidget.selectors.collapse, this);
        a.AdminLTE.boxWidget.collapse(b)
    }, a.fn.removeBox = function () {
        var b = a(a.AdminLTE.boxWidget.selectors.remove, this);
        a.AdminLTE.boxWidget.remove(b)
    }
}(jQuery), function (a) {
    "use strict";
    a.fn.todolist = function (b) {
        var c = a.extend({
            onCheck: function (a) {
                return a
            }, onUncheck: function (a) {
                return a
            }
        }, b);
        return this.each(function () {
            "undefined" != typeof a.fn.iCheck ? (a("input", this).on("ifChecked", function () {
                var b = a(this).parents("li").first();
                b.toggleClass("done"), c.onCheck.call(b)
            }), a("input", this).on("ifUnchecked", function () {
                var b = a(this).parents("li").first();
                b.toggleClass("done"), c.onUncheck.call(b)
            })) : a("input", this).on("change", function () {
                var b = a(this).parents("li").first();
                b.toggleClass("done"), a("input", b).is(":checked") ? c.onCheck.call(b) : c.onUncheck.call(b)
            })
        })
    }
}(jQuery);


//!function (t) {
//    function e(a) {
//        if (i[a])return i[a].exports;
//        var n = i[a] = {exports: {}, id: a, loaded: !1};
//        return t[a].call(n.exports, n, n.exports, e), n.loaded = !0, n.exports
//    }
//
//    var i = {};
//    return e.m = t, e.c = i, e.p = "", e(0)
//}([function (t, e, i) {
//    t.exports = i(1)
//}, function (t, e, i) {
//    !function () {
//        $.fn.datetimepicker.dates["zh-CN"] = {
//            days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日"],
//            daysShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六", "周日"],
//            daysMin: ["日", "一", "二", "三", "四", "五", "六", "日"],
//            months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
//            monthsShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
//            today: "今天",
//            suffix: [],
//            meridiem: ["上午", "下午"]
//        }, String.prototype.fullLength = function () {
//            return this.replace(/[^\x00-\xff]/g, "  ").length
//        }, String.prototype.contains = function (t) {
//            return this.indexOf(t) >= 0
//        }, Array.prototype.first = function () {
//            return this.length > 0 ? this[0] : null
//        }, Date.prototype.format = function (t) {
//            var e = {
//                "M+": this.getMonth() + 1,
//                "d+": this.getDate(),
//                "h+": this.getHours(),
//                "m+": this.getMinutes(),
//                "s+": this.getSeconds(),
//                "q+": Math.floor((this.getMonth() + 3) / 3),
//                S: this.getMilliseconds()
//            };
//            /(y+)/.test(t) && (t = t.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)));
//            for (var i in e)new RegExp("(" + i + ")").test(t) && (t = t.replace(RegExp.$1, 1 == RegExp.$1.length ? e[i] : ("00" + e[i]).substr(("" + e[i]).length)));
//            return t
//        }, $(window).ajaxStart(function () {
//        }).ajaxSuccess(function (t, e, i) {
//        }).ajaxError(function (t, e, i, a) {
//        }).ajaxComplete(function (t, e, i) {
//            if ("JSON" == i.dataType.toUpperCase()) {
//                var a = e.responseJSON;
//                !a.success && a.type && "LOGIN" == a.type && (document.location.href = "signin.html")
//            }
//        });
//        var t = i(2);
//        new t({}).init()
//    }()
//}, function (t, e, i) {
//    var a = i(3), n = i(5), s = i(21), r = i(22), o = i(32);
//    t.exports = Backbone.View.extend({
//        tagName: "div", className: "app", events: {}, initialize: function (t) {
//            this.$el.html(o), this.isInitGlobal = !1, this.currentDate = {
//                start: null,
//                end: null
//            }, this.menuconfig = {}, this.globals = {}, this.menus = {}, this.reports = {}, this.sideBar = new a, this.loadmask = new s, this.loadmask.hide(), this.$(".app-main").append(this.loadmask.render().el), this.listenTo(this.sideBar, "itemchange", this.sideitemChange), this.listenTo(this, "menuready", this.menuReady), this.listenToOnce(this.sideBar, "initcomplete", function () {
//                this.render(), $(".loadmask").remove(), $("body").append(this.el)
//            })
//        }, render: function () {
//            this.$(".sidebar").html(this.sideBar.el)
//        }, init: function () {
//            return this.sideBar.init(), this
//        }, sideitemChange: function (t) {
//            this.menuid = t.subid, $.ajax({
//                url: "api/menu",
//                type: "GET",
//                data: {
//                    menuId: this.menuid,
//                    staDate: this.currentDate.start || void 0,
//                    endDate: this.currentDate.end || void 0,
//                    isInitGlobal: this.isInitGlobal
//                },
//                dataType: "JSON",
//                beforeSend: function () {
//                    this.loadmask.show()
//                }.bind(this),
//                success: function (t) {
//                    return t.success ? (this.menuconfig = t.data, void this.trigger("menuready")) : void(this.data = [])
//                }.bind(this),
//                error: function () {
//                    this.data = []
//                }.bind(this),
//                complete: function () {
//                    this.loadmask.hide()
//                }.bind(this)
//            })
//        }, menuReady: function () {
//            this.isInitGlobal || (this.clearFilter(this.globals), this.globals = {}, this.globals = r.build(this.menuconfig.global), this.$(".app-main>.main-container>.navbar").empty(), _.each(this.globals, function (t, e) {
//                "daterange" == t.type ? (this.currentDate.start && t.widget.setStart(this.currentDate.start), this.currentDate.end && t.widget.setEnd(this.currentDate.end), this.listenTo(t.widget, "change", this.daterangeChange)) : this.listenTo(t.widget, "change", this.filterChange), this.$(".app-main>.main-container>.navbar").append(t.widget.render().el)
//            }, this), this.isInitGlobal = !0), this.clearFilter(this.menus), this.menus = {}, this.menus = r.build(this.menuconfig.menu);
//            _.filter(this.menus, function (t) {
//                return t.widget.groupId && t.widget.level
//            }, this);
//            this.$(".menu-filter > .float-left").empty(), this.$(".menu-filter > .float-right").empty(), _.each(this.menus, function (t, e) {
//                "daterange" == t.type ? (this.currentDate.start && t.widget.setStart(this.currentDate.start), this.currentDate.end && t.widget.setEnd(this.currentDate.end), this.listenTo(t.widget, "change", this.daterangeChange)) : this.listenTo(t.widget, "change", this.filterChange), t.widget.groupId || "daterange" == t.type ? this.$(".menu-filter > .float-left").append(t.widget.render().el) : this.$(".menu-filter > .float-right").append(t.widget.render().el)
//            }, this), this.cleanReports(), this.$(".panel-container").empty(), _.each(this.menuconfig.report, function (t, e) {
//                var i = new n({
//                    reportid: t.id,
//                    title: e,
//                    descs: t.descs,
//                    allowdownload: t.allowdownload,
//                    itemconfig: t.items,
//                    condition: this.getCondition(),
//                    filter: t.filter || {},
//                    dime: t.dime || null
//                });
//                this.reports[e] = i, this.$(".panel-container").append(i.render().el), i.init()
//            }, this)
//        }, clearFilter: function (t) {
//            t && _.each(t || {}, function (t, e) {
//                this.stopListening(t.widget), t.widget.destory && t.widget.destory(), t.widget.remove()
//            }, this)
//        }, cleanReports: function () {
//            this.reports && (_.each(this.reports || {}, function (t, e) {
//                this.stopListening(t), t.destory && t.destory(), t.remove()
//            }, this), this.reports = {})
//        }, filterChange: function (t, e, i, a) {
//            if (!i || !a)return void this.resetReport();
//            var n = _.filter(this.menus, function (t) {
//                return t.widget.groupId && t.widget.groupId == i && t.widget.level && t.widget.level > a
//            }, this);
//            _.each(n, function (t, e) {
//                t.widget.reset()
//            }, this);
//            var s = _.filter(this.menus, function (t) {
//                return !(!t.widget.groupId || t.widget.groupId != i || t.widget.level != a)
//            }, this).first(), o = _.findWhere(s.widget.data, {value: e}), l = o && o.children ? o.children : [];
//            r.convertCascadeData(l), n.length > 0 && (n[0].widget.bind(l), _.each(n, function (t, e) {
//                e > 0 && t.widget.bind([])
//            })), this.resetReport()
//        }, daterangeChange: function (t, e) {
//            this.isInitGlobal = !1, this.currentDate.start = t, this.currentDate.end = e, this.sideitemChange({subid: this.menuid})
//        }, resetReport: function () {
//            _.each(this.reports, function (t, e) {
//                var i = this.getCondition();
//                t.setCondition(i)
//            }, this)
//        }, getCondition: function () {
//            var t = r.getConditionTemplate();
//            return t.filter.global = r.getFilterCondition(this.globals), t.filter.menu = r.getFilterCondition(this.menus), t.menuId = parseInt(this.menuid, 10), t
//        }
//    })
//}, function (t, e, i) {
//    var a = i(4);
//    t.exports = Backbone.View.extend({
//        tagName: "ul",
//        className: "menu",
//        events: {"click li>a": "itemChange", "click div>a": "collapse"},
//        initialize: function (t) {
//            this.template = _.template(a), this.active = {
//                id: -1,
//                subid: -1
//            }, this.listenTo(this, "dataready", this.dataReady)
//        },
//        render: function () {
//            var t = this.template({data: this.data || []});
//            return this.$el.html(t), this
//        },
//        init: function () {
//            $.ajax({
//                url: "api/side", type: "POST", dataType: "JSON", beforeSend: function () {
//                }.bind(this), success: function (t) {
//                    return t.success ? (this.data = t.data, void this.trigger("dataready")) : void(this.data = [])
//                }.bind(this), error: function () {
//                    this.data = []
//                }.bind(this), complete: function () {
//                }.bind(this)
//            })
//        },
//        dataReady: function () {
//            this.render();
//            var t = this.$("li>a").first().parent().addClass("active"), e = this.$(".menu-text").first().addClass("active");
//            this.active.subid = t.attr("id"), this.active.id = e.attr("id"), this.trigger("initcomplete"), this.trigger("itemchange", this.active)
//        },
//        itemChange: function (t) {
//            var e = $(t.target), i = {id: e.parent().parents("li").attr("id"), subid: e.parent().attr("id")};
//            this.active = i, this.$(".active").removeClass("active"), e.parent().addClass("active"), e.parent().parent().prev().addClass("active"), this.trigger("itemchange", this.active)
//        },
//        collapse: function (t) {
//            var e = $(t.target);
//            e.parent().next().toggle()
//        }
//    })
//}, function (t, e) {
//    t.exports = '<# _.each(obj.data, function(item,key){ #> <li id="<#- item.id #>" text="<#- item.text #>"><div class="menu-text" <# if(item.value!=undefined && item.value!=null) { #> value="<#- item.value  #>" <# } #>><a class="text" <# if(item.value!=undefined && item.value!=null) { #> value="<#- item.value  #>" <# } #>><#- item.text#><span class="caret"></span></a></div> <# if(item.childs && item.childs.length > 0) { #> <ul class="menu-list"> <# _.each(item.childs || [], function(subitem,subkey){ #> <li id="<#- subitem.id #>" text="<#- item.text #>"><a <# if(subitem.value!=undefined && subitem.value!=null) { #> value="<#- subitem.value  #>" <# } #>><span></span><#- subitem.text #></a></li> <# }, this); #> </ul> <# } #> </li> <# }, this); #>'
//}, function (t, e, i) {
//    var a = i(6), n = i(17), s = i(19), r = i(21), o = i(22), l = i(31);
//    t.exports = Backbone.View.extend({
//        tagName: "div",
//        className: "panel panel-default",
//        template: _.template(l),
//        events: {
//            'shown.bs.tab a[data-toggle="tab"]': "tabShown",
//            "click .toggle-button>a": "showChartOrTable",
//            "click .down-report": "downloadReport",
//            "click .head-question": "showQuestion"
//        },
//        initialize: function (t) {
//            var e = t || {};
//            this.reportid = e.reportid ? parseInt(e.reportid, 10) : -1, this.condition = e.condition || {}, this.$el.html(this.template({
//                title: e.title || "",
//                descs: e.descs || [],
//                allowdownload: e.allowdownload,
//                tabs: e.itemconfig || {}
//            })), t.dime && (this.dime = new n({data: t.dime}), this.$(".head-download").before(this.dime.render().el), this.listenTo(this.dime, "change", this.dimeChange)), this.filters = o.build(e.filter), _.each(this.filters, function (t, e) {
//                this.listenTo(t.widget, "change", this.filterChange), this.$(".panel-heading>.nav-pills").append(t.widget.render().el)
//            }, this), this.pagination = new s({
//                totalRecords: e.totalElements || 0,
//                totalPages: e.totalPages || 0
//            }), this.pagination.hide(), this.listenTo(this.pagination, "pagechange", this.paginationChange), this.$(".toggle-button").after(this.pagination.render().el), this.loadmask = new r, this.$(".panel-body").append(this.loadmask.render().el), this.charts = {}, this.current = null, this.listenTo(this, "dataready", this.dataReady)
//        },
//        render: function () {
//            return this
//        },
//        init: function () {
//            this.$('.panel-body a[data-toggle="tab"]').first().tab("show")
//        },
//        filterChange: function (t, e, i, a) {
//            if (_.each(this.charts, function (t, e) {
//                    t.featrue = null
//                }, this), !i || !a)return void this.fetch();
//            var n = _.filter(this.filters, function (t) {
//                return t.widget.groupId && t.widget.groupId == i && t.widget.level && t.widget.level > a
//            }, this);
//            _.each(n, function (t, e) {
//                t.widget.reset()
//            }, this);
//            var s = _.filter(this.filters, function (t) {
//                return !(!t.widget.groupId || t.widget.groupId != i || t.widget.level != a)
//            }, this).first(), r = _.findWhere(s.widget.data, {value: e}), l = r && r.children ? r.children : [];
//            o.convertCascadeData(l), n.length > 0 && (n[0].widget.bind(l), _.each(n, function (t, e) {
//                e > 0 && t.widget.bind([])
//            })), this.fetch()
//        },
//        dimeChange: function (t, e) {
//            _.each(this.charts, function (t, e) {
//                t.featrue = null
//            }, this), this.fetch()
//        },
//        downloadReport: function () {
//            this.$('form input[name="condition"]').val(JSON.stringify(this.getCondition())), this.$('form input[name="reportName"]').val(this.current.name), this.$("form").attr("action", "api/download"), this.$("form").submit(), this.$('form input[name="condition"]').val(""), this.$('form input[name="reportName"]').val(""), this.$("form").attr("action", "login.html")
//        },
//        tabShown: function (t) {
//            var e = $(t.target).attr("href"), i = this.$(e).attr("itemname"), n = this.$(e).attr("itemid"), s = "0" == this.$(e).attr("chart-type");
//            ispive = "pive-table" == this.$(e).attr("sub-chart-type"), s ? this.$(".toggle-button").hide() : this.$(".toggle-button").show(), this.current = this.charts[i], this.charts[i] || (this.current = new a({
//                itemid: n,
//                name: i,
//                singleTable: s,
//                ispive: ispive
//            }), this.$(e).find(".chart-container").html(this.current.el), this.current.render(), this.charts[i] = this.current), this.current.show(this.getShowType()), this.paginationState(this.current.getPaginationInfo()), this.current.hasData() || this.fetch(), this.$(".total-num").html(this.current.featrue ? this.current.featrue : "")
//        },
//        dataReady: function (t) {
//            var e = ($.pivotUtilities, _.template('<span class="total-num-item"><#- obj.text #>：<span class="total-num-value"><#- obj.value #></span></span>')), i = "";
//            _.each(t.featrue || {}, function (t, a) {
//                i += e({text: a, value: t})
//            }, this), "" != i && (this.current.featrue = i, this.$(".total-num").html(i)), this.current.bind(t);
//            var a = this.current.getPaginationInfo();
//            this.paginationState(a)
//        },
//        paginationChange: function (t) {
//            this.fetch()
//        },
//        paginationState: function (t) {
//            return t.totalPages <= 1 ? (this.pagination.hide(), this.pagination.setTotalRecords(0), this.pagination.setTotalPages(0), this.pagination.setSize(-1), void this.pagination.setCurrentIndex(1)) : (this.pagination.setTotalRecords(t.totalElements), this.pagination.setTotalPages(t.totalPages), this.pagination.setSize(t.size), this.pagination.setCurrentIndex(t.number), void this.pagination.show())
//        },
//        showChartOrTable: function (t) {
//            var e = $(t.target);
//            e.siblings().removeClass("active"), e.addClass("active"), this.current.show(this.getShowType()), this.paginationState(this.current.getPaginationInfo()), this.current.hasData() || this.fetch()
//        },
//        setCondition: function (t) {
//            this.condition = t, _.each(this.charts, function (t, e) {
//                t.clear()
//            }, this), this.paginationState({totalPages: 0}), this.fetch()
//        },
//        getCondition: function () {
//            return this.condition.reportId = this.reportid, this.condition.itemId = this.current ? parseInt(this.current.itemid, 10) : -1, this.condition.filter.report = o.getFilterCondition(this.filters), this.current.singleTable ? this.condition.viewType = "table" : this.condition.viewType = this.getShowType(), this.condition.pageStart = this.pagination.getCurrentIndex(), this.condition.pageLimit = this.pagination.getSize(), this.dime && (this.condition.dime = this.dime.selectedValue), this.current.isPive && (this.condition.subChartType = "pive-table"), this.condition
//        },
//        getShowType: function () {
//            return this.$(".toggle-button>.active").attr("type")
//        },
//        fetch: function () {
//            var t = "api/execute", e = this.getCondition();
//            e.isInitFeature = null != this.current.featrue, $.ajax({
//                url: t,
//                type: "POST",
//                data: {condition: JSON.stringify(e)},
//                dataType: "JSON",
//                beforeSend: function () {
//                    this.loadmask.show()
//                }.bind(this),
//                success: function (t) {
//                    return t.success ? (this.data = t.data, void this.trigger("dataready", this.data)) : void(this.data = [])
//                }.bind(this),
//                error: function () {
//                    this.data = []
//                }.bind(this),
//                complete: function () {
//                    this.loadmask.hide()
//                }.bind(this)
//            })
//        },
//        showQuestion: function (t) {
//            var e = $(t.currentTarget);
//            e.find(".descs").hasClass("active") ? e.find(".descs").removeClass("active") : e.find(".descs").addClass("active")
//        }
//    })
//}, function (t, e, i) {
//    var a = i(7), n = i(9);
//    t.exports = Backbone.View.extend({
//        tagName: "div", className: "chart-view", events: {}, initialize: function (t) {
//            this.$el.attr("style", "width:100%;");
//            var e = t || {};
//            this.itemid = e.itemid || -1, this.name = e.name || "", this.singleTable = e.singleTable, this.isPive = e.ispive || !1, this.chartView = new a, this.$el.append(this.chartView.el), this.tableView = new n({ispive: this.isPive}), this.$el.append(this.tableView.el), this.singleTable ? (this.chartView.hide(), this.tableView.show()) : (this.tableView.hide(), this.chartView.show()), this.pagination = {totalPages: 0}
//        }, render: function () {
//            return this.chartView.render(), this.tableView.render(), this
//        }, bind: function (t) {
//            return "table" == t.viewType ? (this.chartView.hide(), this.tableView.bind(t), this.tableView.show(), void(this.pagination = this.tableView.getPagination())) : (this.tableView.hide(), this.chartView.show(), this.chartView.bind(t), void(this.pagination = this.chartView.getPagination()))
//        }, hasData: function () {
//            return "block" == this.tableView.$el.css("display") ? null != this.tableView.data && void 0 != this.tableView.data : null != this.chartView.data && void 0 != this.chartView.data
//        }, clear: function () {
//            this.chartView.clear(), this.tableView.clear()
//        }, show: function (t) {
//            "table" == t && (this.chartView.hide(), this.tableView.show(), this.pagination = this.tableView.getPagination()), "chart" == t && (this.chartView.show(), this.tableView.hide(), this.pagination = this.chartView.getPagination())
//        }, getPaginationInfo: function () {
//            return this.pagination
//        }
//    })
//}, function (t, e, i) {
//    var a = i(8);
//    t.exports = Backbone.View.extend({
//        tagName: "div", className: "echarts", events: {}, initialize: function (t) {
//            this.$el.attr("style", "width:100%;height:100%;");
//            var e = t || {};
//            this.data = e.data || null
//        }, render: function () {
//            return this.chart || (this.chart = echarts.init(this.el)), !this.data || this.data.type ? this : (this.$el.addClass(this.data.type), this)
//        }, hide: function () {
//            this.$el.hide()
//        }, show: function () {
//            this.$el.show()
//        }, bind: function (t) {
//            this.data = t, this.chart.clear();
//            var e = a.createOption(t);
//            this.chart.setOption(e)
//        }, clear: function () {
//            this.data = null, this.chart.clear()
//        }, getPagination: function () {
//            return this.data && this.data.pagination && this.data.pagination, {totalPages: 0}
//        }
//    })
//}, function (t, e, i) {
//    var a = i(7), n = i(9), s = i(13), r = i(14), o = i(15), l = i(16), h = i(12);
//    t.exports = {
//        charts: {line: s, bar: r, barstack: r, pie: o, "mix-bar-line": l, pivot: h},
//        createEchartView: function () {
//            return new a
//        },
//        createTableView: function () {
//            return new n
//        },
//        createOption: function (t) {
//            var e = this.charts[t.type](), i = e.getOption(t);
//            return i
//        }
//    }
//}, function (t, e, i) {
//    var a = i(10), n = i(12);
//    t.exports = Backbone.View.extend({
//        tagName: "div",
//        className: "table-container",
//        events: {},
//        initialize: function (t) {
//            var e = t || {};
//            e.ispive ? (this.$el.attr("style", "width:100%;overflow: auto;"), this.table = new n) : (this.$el.attr("style", "width:100%;overflow-x: auto;"), this.table = new a), this.$el.html(this.table.el)
//        },
//        render: function () {
//            return this.table.bind(this.data || {}), this
//        },
//        bind: function (t) {
//            this.data = t, this.render()
//        },
//        clear: function () {
//            this.data = null, this.render()
//        },
//        hide: function () {
//            this.$el.hide()
//        },
//        show: function () {
//            this.$el.show()
//        },
//        getPagination: function () {
//            return this.data && this.data.pagination ? this.data.pagination : {totalPages: 0}
//        }
//    })
//}, function (t, e, i) {
//    var a = i(11);
//    t.exports = Backbone.View.extend({
//        tagName: "table",
//        className: "table table-striped",
//        events: {},
//        initialize: function (t) {
//        },
//        render: function () {
//            var t = this.data || {}, e = 0, i = 0;
//            _.each(t.columns || [], function (t, e) {
//                i += 10 * t.toString().fullLength()
//            }, this), _.each(t.rows || [], function (t, i) {
//                var a = 0;
//                _.each(t, function (t, e) {
//                    return !t || void(a += 12 * t.toString().fullLength())
//                }, this), e = a > e ? a : e
//            }, this);
//            var n = _.template(a);
//            return this.$el.html(n({
//                columns: t.columns || [],
//                rows: t.rows || []
//            })), e = e > i ? e : i, this.$el.outerWidth() < e && this.$el.css("min-width", e + "px"), this
//        },
//        bind: function (t) {
//            this.data = t, this.render()
//        },
//        clear: function () {
//            this.data = null, this.render()
//        },
//        hide: function () {
//            this.$el.hide()
//        },
//        show: function () {
//            this.$el.show()
//        },
//        getPagination: function () {
//            return this.data && this.data.pagination ? this.data.pagination : {totalPages: 0}
//        }
//    })
//}, function (t, e) {
//    t.exports = '<table class="table table-striped"><thead><tr> <# _.each(obj.columns, function(key,index) { #> <th><#- key #></th> <# },this); #> </tr></thead><tbody> <# _.each(obj.rows, function(rowitem,rowindex) { #> <tr> <# _.each(obj.columns, function(colname,colindex) { #> <td><#- rowitem[colname] #></td> <# },this); #> </tr> <# },this); #> </tbody></table>'
//}, function (t, e, i) {
//    i(11);
//    t.exports = Backbone.View.extend({
//        tagName: "div", events: {}, initialize: function (t) {
//            this.$el.attr("style", 'width:"100%",height:"100%"')
//        }, render: function () {
//            var t = $.extend($.pivotUtilities.locales.zh.renderers, $.pivotUtilities.export_renderers);
//            return this.data && this.data.rows && this.$el.pivotUI(this.data.rows, {
//                rows: [],
//                cols: [],
//                aggregatorName: "求和",
//                renderers: t,
//                menuLimit: 500
//            }, !0), this
//        }, bind: function (t) {
//            t.errorMessage && alert(t.errorMessage), this.data = t, this.render()
//        }, clear: function () {
//            this.data = null, this.render()
//        }, hide: function () {
//            this.$el.hide()
//        }, show: function () {
//            this.$el.show()
//        }, getPagination: function () {
//            return this.data && this.data.pagination ? this.data.pagination : {totalPages: 0}
//        }
//    })
//}, function (t, e) {
//    t.exports = function () {
//        var t = function () {
//            var t = {
//                title: {text: ""},
//                grid: {left: "2%", right: "5%", top: "9%", bottom: "5%", containLabel: !0},
//                tooltip: {trigger: "axis", axisPointer: {type: "line", lineStyle: {width: 0}}},
//                color: ["#207dd7", "#a5c869", "#f18e42"],
//                legend: {
//                    top: "4",
//                    right: "34",
//                    bottom: "10",
//                    orient: "horizontal",
//                    align: "auto",
//                    textStyle: {fontSize: 12},
//                    data: []
//                },
//                xAxis: {
//                    type: "category",
//                    splitLine: {lineStyle: {type: "dashed"}},
//                    axisTick: {show: !1},
//                    axisLine: {show: !1, lineStyle: {width: 1, color: "#4c4c4c"}},
//                    boundaryGap: !1,
//                    data: []
//                },
//                yAxis: [{
//                    type: "value",
//                    axisTick: {show: !1},
//                    splitLine: {lineStyle: {type: "dashed"}},
//                    axisLine: {show: !1, lineStyle: {width: 1, color: "#4c4c4c"}}
//                }, {
//                    type: "value",
//                    splitLine: {lineStyle: {type: "dashed"}},
//                    axisLine: {show: !1, lineStyle: {width: 1, color: "#4c4c4c"}}
//                }],
//                series: []
//            };
//            return t
//        }, e = function (e) {
//            var i = t();
//            _.each(e.seriekey, function (t, a) {
//                i.legend.data.push(t), i.series.push({
//                    name: t,
//                    type: "line",
//                    itemStyle: {normal: {lineStyle: {width: 2}}},
//                    showAllSymbol: !0,
//                    symbolSize: 6,
//                    areaStyle: {normal: {opacity: .1}},
//                    yAxisIndex: e.charts[t].conf.yAxisIndex || 0,
//                    data: []
//                })
//            }, this), _.each(e.datakey, function (t, e) {
//                i.xAxis.data.push(t)
//            }, this);
//            var a = 0;
//            return _.each(e.seriekey, function (t, n) {
//                i.series[n].name = e.charts[t].conf.xremark || i.series[n].name, e.charts[t].conf.yAxisIndex && e.charts[t].conf.yAxisIndex > a && (a = e.charts[t].conf.yAxisIndex), _.each(e.datakey, function (a, s) {
//                    i.series[n].data.push(e.charts[t].data[a])
//                }, this)
//            }, this), 0 == a && i.yAxis.splice(1, 1), i
//        };
//        return {getOption: e}
//    }
//}, function (t, e) {
//    t.exports = function () {
//        var t = function () {
//            var t = {
//                title: {text: ""},
//                color: ["#207ED8", "#a5c869", "#f18e42"],
//                legend: {show: !1, x: "right", data: []},
//                tooltip: {trigger: "axis", axisPointer: {type: "line", lineStyle: {width: 0}}},
//                grid: {borderWidth: 0, left: "12%", right: "4%", top: "4%", bottom: "8%", containLabel: !1},
//                xAxis: {
//                    type: "value",
//                    splitLine: {lineStyle: {type: "dashed"}},
//                    axisTick: {show: !1},
//                    axisLine: {show: !1},
//                    boundaryGap: [0, .01]
//                },
//                yAxis: {
//                    type: "category",
//                    data: [],
//                    splitLine: {lineStyle: {type: "dashed"}},
//                    axisLine: {show: !1},
//                    axisTick: {show: !1}
//                },
//                series: []
//            };
//            return t
//        }, e = function (e) {
//            var i = t();
//            return i.legend.data = [], i.series = [], i.yAxis.data = [], _.each(e.seriekey, function (t, a) {
//                i.legend.data.push(t);
//                var n = {name: t, type: "bar", barCategoryGap: "50%", data: []};
//                "barstack" == e.type && (n.stack = "总量", i.grid.top = "7%"), i.series.push(n)
//            }, this), i.legend.show = i.legend.data.length > 1, _.each(e.datakey, function (t, e) {
//                i.yAxis.data.push(t)
//            }, this), i.yAxis.data = i.yAxis.data.reverse(), _.each(e.seriekey, function (t, a) {
//                _.each(e.datakey, function (n, s) {
//                    i.series[a].data.push(e.charts[t].data[n])
//                }, this), i.series[a].data = i.series[a].data.reverse()
//            }, this), i
//        };
//        return {getOption: e}
//    }
//}, function (t, e) {
//    t.exports = function () {
//        var t = function () {
//            var t = {
//                title: {show: !1},
//                tooltip: {trigger: "item", formatter: "{a} <br/>{b} : {c} ({d}%)"},
//                legend: {orient: "vertical", left: "left", data: []},
//                grid: {left: "2%", right: "4%", top: "9%", bottom: "5%", containLabel: !0},
//                series: [{
//                    name: "",
//                    type: "pie",
//                    radius: "80%",
//                    center: ["50%", "50%"],
//                    data: [],
//                    itemStyle: {emphasis: {shadowBlur: 10, shadowOffsetX: 0, shadowColor: "rgba(0, 0, 0, 0.5)"}}
//                }]
//            };
//            return t
//        }, e = function (e) {
//            var i = t();
//            return _.each(e.seriekey, function (t, e) {
//                i.legend.data.push(t), i.legend.show = !1
//            }, this), _.each(e.datakey, function (t, a) {
//                i.series[0].data.push({name: t, value: e.charts.data[a][t]})
//            }, this), i
//        };
//        return {getOption: e}
//    }
//}, function (t, e) {
//    t.exports = function () {
//        var t = function () {
//            var t = {
//                title: {text: ""},
//                grid: {left: "2%", right: "4%", top: "9%", bottom: "5%", containLabel: !0},
//                tooltip: {trigger: "axis"},
//                tooltip: {trigger: "axis", axisPointer: {type: "line", lineStyle: {width: 0}}},
//                color: ["#a5c869", "#207ED8", "#f18e42"],
//                legend: {
//                    top: "4",
//                    right: "34",
//                    bottom: "10",
//                    orient: "horizontal",
//                    align: "auto",
//                    textStyle: {fontSize: 12},
//                    data: []
//                },
//                xAxis: {
//                    type: "category",
//                    splitLine: {lineStyle: {type: "dashed"}},
//                    axisLabel: {show: !0, interval: 0, rotate: 0},
//                    axisTick: {show: !1},
//                    axisLine: {show: !1, lineStyle: {width: 1, color: "#4c4c4c"}},
//                    boundaryGap: !0,
//                    data: []
//                },
//                yAxis: [{
//                    type: "value",
//                    position: "right",
//                    axisTick: {show: !1},
//                    splitLine: {show: !1, lineStyle: {type: "dashed"}},
//                    axisLine: {show: !1, lineStyle: {width: 1, color: "#4c4c4c"}}
//                }, {
//                    type: "value",
//                    axisTick: {show: !1},
//                    splitLine: {lineStyle: {type: "dashed"}},
//                    axisLine: {show: !1, lineStyle: {width: 1, color: "#4c4c4c"}}
//                }],
//                series: []
//            };
//            return t
//        }, e = function (e) {
//            var i = t();
//            _.each(e.seriekey, function (t, a) {
//                i.legend.data.push(t), i.series.push({
//                    name: t,
//                    type: e.charts[t].conf.type,
//                    itemStyle: {normal: {lineStyle: {width: 2}}},
//                    areaStyle: {normal: {color: ["#bbd9fa"], opacity: .1}},
//                    yAxisIndex: e.charts[t].conf.yAxisIndex || 0,
//                    barMaxWidth: 64,
//                    data: []
//                })
//            }, this), _.each(e.datakey, function (t, e) {
//                i.xAxis.data.push(t)
//            }, this);
//            var a = 0;
//            return _.each(e.seriekey, function (t, n) {
//                i.series[n].name = e.charts[t].conf.xremark || i.series[n].name, e.charts[t].conf.yAxisIndex && e.charts[t].conf.yAxisIndex > a && (a = e.charts[t].conf.yAxisIndex), _.each(e.datakey, function (a, s) {
//                    i.series[n].data.push(e.charts[t].data[a])
//                }, this)
//            }, this), 0 == a && i.yAxis.splice(1, 1), i
//        };
//        return {getOption: e}
//    }
//}, function (t, e, i) {
//    var a = i(18);
//    t.exports = Backbone.View.extend({
//        tagName: "div",
//        className: "dime",
//        events: {"click a": "change"},
//        template: _.template(a),
//        initialize: function (t) {
//            var e = t || {};
//            this.data = e.data ? e.data.split(";") : [], this.selectedValue = this.data[0], this.selectedText = this.data[0], this.$el.html(this.template({
//                data: this.data,
//                selectedValue: this.selectedValue
//            }))
//        },
//        render: function () {
//            return this
//        },
//        change: function (t) {
//            var e = $(t.target);
//            e.html() != this.selectedValue && (this.selectedText = e.html(), this.selectedValue = e.html(), this.$("li").removeClass("active"), e.parents("li").addClass("active"), this.trigger("change", this.selectedText, this.selectedValue))
//        }
//    })
//}, function (t, e) {
//    t.exports = "<ul> <# _.each(obj.data || [], function(item,index) { #> <li class=\"<#= (obj.selectedValue==item)?'active':'' #>\"><a><#- item #></a></li> <# }, this); #> </ul>"
//}, function (t, e, i) {
//    var a = i(20);
//    t.exports = Backbone.View.extend({
//        tagName: "nav", template: _.template(a), events: {
//            "click a": function (t) {
//                var e = parseInt($(t.target).attr("value"), 10);
//                this.setCurrentIndex(e), this.trigger("pagechange", e)
//            }
//        }, initialize: function (t) {
//            t = t || {}, this.displayFirst = !t.displayFirst || t.displayFirst, this.displayPreviou = !!t.displayPreviou && t.displayPreviou, this.displayNext = !!t.displayNext && t.displayNext, this.displayLast = !t.displayLast || t.displayLast, this.currentIndex = t.currentIndex || 1, this.showItem = t.showItem || 5, this.totalPages = t.totalPages || 0, this.totalRecords = t.totalRecords || 0, this.size = t.size || 10
//        }, render: function () {
//            var t = Math.max(Math.min(this.currentIndex - Math.floor(this.showItem / 2), this.totalPages - this.showItem + 1), 1), e = Math.min(Math.max(this.currentIndex + Math.floor(this.showItem / 2), this.showItem), this.totalPages), i = {
//                currentIndex: this.currentIndex || 1,
//                showItem: this.showItem || 1,
//                totalPages: this.totalPages || 0,
//                totalRecords: this.totalRecords || 0,
//                start: t ? t : 1,
//                end: e && 0 != e ? e : 1,
//                displayFirst: this.displayFirst,
//                displayPreviou: this.displayPreviou,
//                displayNext: this.displayNext,
//                displayLast: this.displayLast
//            };
//            return this.$el.html(this.template(i)), this
//        }, hide: function () {
//            this.$el.hide()
//        }, show: function () {
//            this.$el.show()
//        }, setCurrentIndex: function (t) {
//            return this.currentIndex = t, this.render(), this
//        }, getCurrentIndex: function () {
//            return this.currentIndex
//        }, setShowItem: function (t) {
//            return this.showItem = t, this
//        }, setTotalPages: function (t) {
//            return this.totalPages = t, this
//        }, setTotalRecords: function (t) {
//            return this.totalRecords = t, this
//        }, setDisplayFirst: function (t) {
//            return this.displayPreviou = t, this
//        }, setDisplayPreviou: function (t) {
//            return this.displayPreviou = t, this
//        }, setDisplayNext: function (t) {
//            return this.displayNext = t, this
//        }, setDisplayLast: function (t) {
//            return this.displayLast = t, this
//        }, getSize: function (t) {
//            return this.size
//        }, setSize: function (t) {
//            return this.size = t, this
//        }, refresh: function () {
//            return this.render(), this
//        }
//    })
//}, function (t, e) {
//    t.exports = '<ul class="pagination"> <# if(obj.displayFirst)  { #> <li> <# if(obj.currentIndex > (obj.showItem/2)+1) { #> <a value="1"><span aria-hidden="true" value="1">第一页</span></a> <# } else { #> <span class="no-page" value="1" aria-hidden="true">第一页</span> <# } #> </li> <# } #> <# if(obj.displayPreviou)  { #> <li> <# if(obj.currentIndex > 1) { #> <a aria-label="Previous" value="<#- (obj.currentIndex-1) #>"><span value="<#- (obj.currentIndex-1) #>" aria-hidden="true">上一页</span></a> <# } else { #> <span value="1" aria-hidden="true">上一页</span> <# } #> </li> <# } #> <# for(var index = obj.start ; index <= obj.end ; index++) { #> <# if(index==obj.currentIndex) { #> <li><span class="active" value="<#- index #>"><#- index #></span></li> <# } else { #> <li><a value="<#- index #>"><#- index #></a></li> <# } #> <# } #> <# if(obj.displayNext)  { #> <li> <# if(obj.totalPages > obj.currentIndex) { #> <a value="<#- obj.currentIndex + 1 #>" aria-label="Next"><span value="<#- obj.currentIndex + 1 #>" aria-hidden="true">下一页</span></a> <# } else { #> <span value="<#- obj.end #>" aria-hidden="true">下一页</span> <# } #> </li> <# } #> <li><span class="info-page">有 <span style="color:#e60012"><#- obj.totalPages #></span>页, <span style="color:#e60012"><#- obj.totalRecords #></span>条记录 <# if (obj.allTotalRecords) { #> / 共有 <span style="color:#e60012"><#- obj.allTotalRecords #></span>条库存记录<# } #></span></li></ul>'
//}, function (t, e) {
//    t.exports = Backbone.View.extend({
//        tagName: "div", className: "loadmask", initialize: function () {
//            this.$el.html('<div class="loadmask-content"><div class="loadmask-img"><div></div><div></div><div></div><div></div><div></div></div><span class="loadmask-text"></span></div>'), this.hide()
//        }, render: function () {
//            return this
//        }, show: function () {
//            this.$el.show()
//        }, hide: function () {
//            this.$el.hide()
//        }
//    })
//}, function (t, e, i) {
//    var a = i(23), n = i(27), s = i(29);
//    t.exports = {
//        build: function (t) {
//            var e = {};
//            return _.each(t, function (t, i) {
//                "daterange" == t.ctrlType && (e[i] = this.buildDateRange(t)), "cascadelist" == t.ctrlType && (e[i] = this.buildCascadeList(t, i)), "dropdownlist" == t.ctrlType && (e[i] = this.buildDropdownList(t, i)), "keyword" == t.ctrlType && (e[i] = this.buildKeywork(t))
//            }, this), e
//        }, buildKeywork: function (t) {
//            var e = {type: "keywork", widget: new n({placeholder: t.viewName})};
//            return e
//        }, buildDateRange: function (t) {
//            var e = {type: "daterange", widget: new s({start: t.data.staDate, end: t.data.endDate})};
//            return e
//        }, buildCascadeList: function (t, e) {
//            var i = [];
//            _.each(t.data, function (t, e) {
//                "全部" != t.text && i.push({
//                    value: t.name,
//                    text: t.name,
//                    children: t.children || void 0,
//                    parentValue: t.parent
//                })
//            });
//            var n = {
//                type: "dropdownlist",
//                widget: new a({
//                    label: e,
//                    groupId: t.groupId,
//                    level: t.level,
//                    data: i,
//                    selectedText: "全部" + e,
//                    selectedValue: ""
//                })
//            };
//            return n
//        }, buildDropdownList: function (t, e) {
//            var i = [];
//            _.each(t.data, function (t, e) {
//                "全部" != t && i.push({value: t, text: t})
//            });
//            var n = {
//                type: "dropdownlist",
//                widget: new a({label: e, data: i, selectedText: "全部" + e, selectedValue: ""})
//            };
//            return n
//        }, getConditionTemplate: function () {
//            var t = {
//                menuId: -1,
//                reportId: -1,
//                itemId: -1,
//                filter: {menu: {}, global: {}, report: {}},
//                pageStart: 1,
//                pageLimit: -1
//            };
//            return t
//        }, getFilterCondition: function (t) {
//            var e = {};
//            return _.each(t || {}, function (t, i) {
//                if ("daterange" == t.type && (e[i] = {
//                        staDate: t.widget.start,
//                        endDate: t.widget.end
//                    }), "dropdownlist" == t.type && (e[i] = t.widget.selectedValue), "keywork" == t.type) {
//                    var a = t.widget.value;
//                    a.replace(new RegExp(/( )/g), "").length > 0 && (e[i] = t.widget.value)
//                }
//            }), e
//        }, convertCascadeData: function (t) {
//            _.each(t, function (t, e) {
//                t.text && t.value || (t.text = t.name, t.value = t.name)
//            })
//        }
//    }
//}, function (t, e, i) {
//    var a = i(24), n = i(26);
//    t.exports = Backbone.View.extend({
//        tagName: "div",
//        className: "dropdown",
//        events: {
//            "click .dropdown-menu li>a": "itemchange",
//            "input .dropdown-filter>input": "inputFilter",
//            "keyup .dropdown-filter>input": "keyboard"
//        },
//        initialize: function (t) {
//            var e = t || {};
//            this.label = e.label || "", this.groupId = e.groupId || null, this.level = e.level || null, this.selectedText = e.selectedText || "", this.selectedValue = e.selectedValue || "", this.data = e.data || [], this.i = -1, this.count = 1, this.toggle = new a({text: ""}), this.layer = new n({data: []})
//        },
//        render: function () {
//            return this.$el.html(this.toggle.render().el), this.$el.append(this.layer.render().el), this.bind(this.data), this
//        },
//        inputFilter: function (t) {
//            var e = $(t.target);
//            this.$("ul>li").removeAttr("style"), "" != e.val() && this.$("ul>li>a:not(:contains(" + e.val() + "))").parent().css("display", "none")
//        },
//        itemchange: function (t) {
//            if (38 != t.keyCode && 40 != t.keyCode) {
//                var e = $(t.target);
//                e.parent().attr("value") != this.selectedValue && (this.$(".dropdown-menu ul>li").removeClass("active"), e.parent().addClass("active"), this.selectedValue = e.parent().attr("value"), this.selectedText = e.html(), this.toggle.setText(this.selectedText), this.level && this.groupId ? this.trigger("change", this.selectedText, this.selectedValue, this.groupId, this.level) : this.trigger("change", this.selectedText, this.selectedValue))
//            }
//        },
//        keyboard: function (t) {
//            var e = $(t.target), i = this.$("ul>li>a:contains(" + e.val() + ")");
//            if (40 == t.keyCode) {
//                if (this.i % 10 == 0 && 0 != this.i) {
//                    var a = 300 * this.count++;
//                    $(i[this.i]).parent().parent()[0].scrollTop = a
//                }
//                this.i == i.length - 1 && (this.count = 1, $(i[this.i]).parent().parent()[0].scrollTop = 0), this.i++, this.i >= i.length && (this.i = 0), this.$("ul>li").removeClass("now"), $(i[this.i]).parent().addClass("now")
//            }
//            if (38 == t.keyCode) {
//                if (this.i % 10 == 0 && 0 != this.i) {
//                    var a = 300 * this.count--;
//                    $(i[this.i]).parent().parent()[0].scrollTop = a
//                }
//                this.i--, this.i < 0 && (this.i = i.length - 1), this.$("ul>li").removeClass("now"), $(i[this.i]).parent().addClass("now")
//            }
//            if (13 == t.keyCode && this.$("ul>.now>a").length > 0) {
//                if (e.parent().attr("value") == this.selectedValue)return void this.$("ul>li").removeClass("now");
//                var n = this.$("ul>.now>a");
//                this.selectedValue = n.parent().attr("value"), this.selectedText = n.html(), this.toggle.setText(this.selectedText), this.level && this.groupId ? this.trigger("change", this.selectedText, this.selectedValue, this.groupId, this.level) : this.trigger("change", this.selectedText, this.selectedValue), this.$el.removeClass("open"), this.$("ul>li").removeClass("now").removeClass("active"), n.parent().addClass("active");
//            }
//        },
//        bind: function (t) {
//            t || (t = []), t.splice(0, 0, {
//                text: "全部" + this.label,
//                value: null
//            }), this.data = t, this.layer.bind(t), this.selectAll()
//        },
//        reset: function () {
//            this.selectAll()
//        },
//        selectAll: function () {
//            this.$("input").val(""), this.selectedValue = this.$("ul>li").removeClass("active").first().addClass("active").attr("value"), this.selectedText = this.$("ul>li").first().find("a").html(), this.toggle.setText(this.selectedText)
//        }
//    })
//}, function (t, e, i) {
//    var a = i(25);
//    t.exports = Backbone.View.extend({
//        tagName: "div",
//        className: "dropdown-toggle",
//        template: _.template(a),
//        initialize: function (t) {
//            var e = t || {};
//            this.$el.attr("data-toggle", "dropdown"), this.text = e.text || "", this.iconClass = e.iconClass || null
//        },
//        render: function () {
//            return this.$el.html(this.template({text: this.text, iconClass: this.iconClass})), this
//        },
//        setText: function (t) {
//            this.text = t, this.render()
//        }
//    })
//}, function (t, e) {
//    t.exports = '<span class="text"><#- obj.text #></span><span class="caret"></span>'
//}, function (t, e) {
//    t.exports = Backbone.View.extend({
//        tagName: "div", className: "dropdown-menu", events: {}, initialize: function (t) {
//            var e = t || {};
//            this.data = e.data || [], this.items = [], this.$el.append('<div class="dropdown-filter"><input type="text"/></div>'), this.$el.append("<ul></ul>"), this.bind(this.data)
//        }, render: function () {
//            return this
//        }, bind: function (t) {
//            this.$("ul").empty();
//            var e = _.template('<li <# if(obj.value!=null) { #>value="<#- obj.value #>"<# } else { #><# }#> index="<#- obj.index #>"  <# if(obj.parentValue) { #> parentValue="<#- obj.parentValue #>" <# } #>><a><#- obj.text #></a></li>');
//            _.each(t, function (t, i) {
//                var a = e({text: t.text, value: t.value, parentValue: t.parentValue, index: i});
//                this.$("ul").append(a)
//            }, this)
//        }
//    })
//}, function (t, e, i) {
//    var a = i(28);
//    t.exports = Backbone.View.extend({
//        tagName: "div",
//        className: "search-keywork",
//        events: {"click .btn-danger": "onSubmit", "click .btn-default": "onCancel"},
//        initialize: function (t) {
//            var e = t || {};
//            this.$el.html(a), this.placeholder = e.placeholder || "", this.$('input[type="text"]').attr("placeholder", this.placeholder), this.value = "", this.$el.on("mouseover", function () {
//                $(this).addClass("open")
//            }), this.$el.on("mouseout", function () {
//                $(this).removeClass("open")
//            })
//        },
//        render: function () {
//            return this
//        },
//        onFocus: function (t) {
//            this.$el.addClass("open")
//        },
//        onSubmit: function () {
//            this.value = this.$('input[type="text"]').val(), this.$el.removeClass("open"), this.trigger("change")
//        },
//        onCancel: function () {
//            this.$('input[type="text"]').val(""), this.value = "", this.$el.removeClass("open"), this.trigger("change")
//        }
//    })
//}, function (t, e) {
//    t.exports = '<input type="text"><div class="ctlr"><button class="btn btn-default btn-xs">清空</button> <button class="btn btn-danger btn-xs">确定</button></div>'
//}, function (t, e, i) {
//    var a = i(24), n = i(30);
//    t.exports = Backbone.View.extend({
//        tagName: "div",
//        className: "dropdown datarange",
//        events: {"click .date-scope>a": "quick", "click .OK": "ok"},
//        initialize: function (t) {
//            var e = t || {};
//            this.start = e.start, this.end = e.end, this.toggle = new a({text: this.start + " 到 " + this.end}), this.$el.html(this.toggle.render().el), this.$el.append(n), this.$(".start-picker").datetimepicker({
//                language: "zh-CN",
//                format: "yyyy-mm-dd",
//                weekStart: 1,
//                todayBtn: 1,
//                autoclose: 0,
//                todayHighlight: 1,
//                startView: 2,
//                minView: 2,
//                forceParse: 0
//            }), this.setStart(this.start), this.$(".end-picker").datetimepicker({
//                language: "zh-CN",
//                format: "yyyy-mm-dd",
//                weekStart: 0,
//                todayBtn: 1,
//                autoclose: 0,
//                todayHighlight: 1,
//                startView: 2,
//                minView: 2,
//                forceParse: 0
//            }), this.setEnd(this.end);
//            var i = this;
//            this.$el.on("hidden.bs.dropdown", function () {
//                i.$(".start-picker").datetimepicker("getFormattedDate") != i.$(".start-picker input").val() && i.$(".start-picker").datetimepicker("update"), i.$(".end-picker").datetimepicker("getFormattedDate") != i.$(".end-picker input").val() && i.$(".end-picker").datetimepicker("update")
//            })
//        },
//        render: function () {
//            return this
//        },
//        quick: function (t) {
//            var e = new Date, i = $(t.target), a = parseInt(i.attr("value"), 10);
//            e.setDate(e.getDate() + a), this.setStart(e.format("yyyy-MM-dd")), a === -1 ? this.setEnd(e.format("yyyy-MM-dd")) : this.setEnd((new Date).format("yyyy-MM-dd")), this.trigger("change", this.start, this.end)
//        },
//        ok: function (t) {
//            this.setStart(this.$(".start-picker").datetimepicker("getFormattedDate")), this.setEnd(this.$(".end-picker").datetimepicker("getFormattedDate")), this.trigger("change", this.start, this.end)
//        },
//        setStart: function (t) {
//            this.start = t, this.$(".start-picker > input").val(this.start), this.$(".start-picker").datetimepicker("update"), this.toggle.setText(this.start + " 到 " + this.end)
//        },
//        setEnd: function (t) {
//            this.end = t, this.$(".end-picker > input").val(this.end), this.$(".end-picker").datetimepicker("update"), this.toggle.setText(this.start + " 到 " + this.end)
//        },
//        destory: function () {
//            this.$el.off("hidden.bs.dropdown")
//        }
//    })
//}, function (t, e) {
//    t.exports = '<div class="dropdown-menu"><div class="date-scope"><a class="yesterday" value="-1">昨日</a> <a class="week" value="-7">近7日</a> <a class="month" value="-30">近30日</a></div><div class="start-picker"><input class="form-control" type="hidden" value=""></div><div class="end-picker"><input class="form-control" type="hidden" value=""></div><div><button class="OK btn btn-primary">确定</button> <button class="cancel btn btn-default">取消</button></div></div>'
//}, function (t, e) {
//    t.exports = '<div class="panel-heading"><span class="panel-title"><#- obj.title #></span><div class="nav nav-pills"> <# if(obj.descs && obj.descs.length) { #> <div class="head-question"><i class="glyphicon glyphicon-question-sign"></i><div class="descs"> <# _.each(obj.descs,function(item,idx){ #> <div><span><#- item.name #>：</span> <#- item.desc #> </div> <# },this); #> </div></div> <# } #> <# if(obj.allowdownload) { #> <div class="head-download"><span class="glyphicon glyphicon-download down-report"></span></div> <# } #> </div></div><div class="panel-body"><ul class="nav nav-tabs" role="tablist"> <# _.each(obj.tabs || {}, function(item,index){ #> <li itemid="<#- item.id #>"><a href="#tab-item-<#- item.id #>" role="tab" data-toggle="tab"><#- item.name #></a></li> <# },this) #> </ul><!-- 选项卡面板 --><div class="tab-content"> <# _.each(obj.tabs || {}, function(item,index){ #> <div class="tab-pane" id="tab-item-<#- item.id #>" chart-type="<#= item.chartType #>" sub-chart-type="<#= item.subChartType #>" itemname="<#- item.name #>" itemid="<#- item.id #>"><div class="chart-container" style="width: 100%"></div></div> <# },this) #> <div class="total-num">交易总额<span style="color:#1daede;font-size:16px;margin:0 6px">12,000</span>元</div></div><div class="toggle-button"><a class="toggle-chart glyphicon glyphicon-signal active" type="chart"></a> <a class="toggle-table glyphicon glyphicon-list-alt" type="table"></a></div><!--选项卡面板结束--><div style="display: none"><form method="post" target="_blank"><input type="hidden" name="condition" value=""> <input type="hidden" name="reportName" value=""></form></div></div>'
//}, function (t, e) {
//    t.exports = '<nav class="app-nav navbar navbar-inverse navbar-fixed-static"><div class="container-fluid"><div class="navbar-header"><a class="navbar-brand" href="#">酷友报表系统</a></div><ul class="nav navbar-nav navbar-left" style="display: none"><li><a href="javascript:void(0);">菜单</a><div></div></li></ul><ul class="nav navbar-nav navbar-right"><li style="display: none"><a href="javascript:void(0);">tcl@kuyumall.com<span class="caret"></span></a></li><li style="display: none"><a href="javascript:void(0);">修改密码</a></li><li><a href="api/logout" onclick="return confirm(\'是否确定退出?\');">注销退出</a></li></ul></div></nav><div class="app-main"><div class="main-container"><div class="navbar"></div><div class="sidebar"></div><div class="main-body"><div class="menu-filter"><div class="float-left"></div><div class="float-right"></div></div><div class="panel-container"></div></div></div></div>'
//}]);